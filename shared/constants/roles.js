// shared/constants/roles.js - Mapping des rôles et permissions

import { USER_ROLES } from './users';
import { PERMISSIONS } from './permissions';

// === MAPPING RÔLES → PERMISSIONS ===
export const ROLE_PERMISSIONS = {
  // === ADMINISTRATEUR - Toutes les permissions ===
  [USER_ROLES.ADMIN]: ['*'], // Wildcard pour toutes les permissions
  
  // === PROPRIÉTAIRE - Permissions complètes sauf système ===
  [USER_ROLES.OWNER]: [
    PERMISSIONS.MANAGE_RESTAURANT,
    PERMISSIONS.VIEW_RESTAURANT,
    PERMISSIONS.UPDATE_RESTAURANT_SETTINGS,
    PERMISSIONS.MANAGE_USERS,
    PERMISSIONS.CREATE_USER,
    PERMISSIONS.UPDATE_USER,
    PERMISSIONS.DELETE_USER,
    PERMISSIONS.VIEW_USERS,
    PERMISSIONS.MANAGE_ROLES,
    PERMISSIONS.MANAGE_MENU,
    PERMISSIONS.CREATE_MENU_ITEM,
    PERMISSIONS.UPDATE_MENU_ITEM,
    PERMISSIONS.DELETE_MENU_ITEM,
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_CATEGORIES,
    PERMISSIONS.UPDATE_PRICES,
    PERMISSIONS.MANAGE_DAILY_SPECIALS,
    PERMISSIONS.CREATE_DAILY_SPECIAL,
    PERMISSIONS.UPDATE_DAILY_SPECIAL,
    PERMISSIONS.DELETE_DAILY_SPECIAL,
    PERMISSIONS.APPROVE_DAILY_SPECIAL,
    PERMISSIONS.VIEW_DAILY_SPECIALS,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.CREATE_ORDER,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.DELETE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.PROCESS_PAYMENT,
    PERMISSIONS.REFUND_ORDER,
    PERMISSIONS.MANAGE_TABLES,
    PERMISSIONS.CREATE_TABLE,
    PERMISSIONS.UPDATE_TABLE,
    PERMISSIONS.DELETE_TABLE,
    PERMISSIONS.UPDATE_TABLE_STATUS,
    PERMISSIONS.VIEW_FLOOR_PLAN,
    PERMISSIONS.EDIT_FLOOR_PLAN,
    PERMISSIONS.MANAGE_RESERVATIONS,
    PERMISSIONS.CREATE_RESERVATION,
    PERMISSIONS.UPDATE_RESERVATION,
    PERMISSIONS.DELETE_RESERVATION,
    PERMISSIONS.VIEW_RESERVATIONS,
    PERMISSIONS.ASSIGN_TABLE,
    PERMISSIONS.CONFIRM_RESERVATION,
    PERMISSIONS.CANCEL_RESERVATION,
    PERMISSIONS.MANAGE_NOTIFICATIONS,
    PERMISSIONS.SEND_NOTIFICATION,
    PERMISSIONS.VIEW_NOTIFICATION_HISTORY,
    PERMISSIONS.CREATE_NOTIFICATION_TEMPLATE,
    PERMISSIONS.VIEW_ANALYTICS,
    PERMISSIONS.VIEW_REVENUE_REPORTS,
    PERMISSIONS.VIEW_CUSTOMER_ANALYTICS,
    PERMISSIONS.VIEW_STAFF_PERFORMANCE,
    PERMISSIONS.EXPORT_DATA,
    PERMISSIONS.CREATE_REPORTS,
    PERMISSIONS.MANAGE_SETTINGS,
    PERMISSIONS.UPDATE_SITE_VITRINE,
    PERMISSIONS.MANAGE_MOBILE_APP,
    PERMISSIONS.CONFIGURE_INTEGRATIONS
  ],
  
  // === GÉRANT - Permissions opérationnelles ===
  [USER_ROLES.MANAGER]: [
    PERMISSIONS.VIEW_RESTAURANT,
    PERMISSIONS.VIEW_USERS,
    PERMISSIONS.MANAGE_MENU,
    PERMISSIONS.CREATE_MENU_ITEM,
    PERMISSIONS.UPDATE_MENU_ITEM,
    PERMISSIONS.DELETE_MENU_ITEM,
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_CATEGORIES,
    PERMISSIONS.UPDATE_PRICES,
    PERMISSIONS.MANAGE_DAILY_SPECIALS,
    PERMISSIONS.CREATE_DAILY_SPECIAL,
    PERMISSIONS.UPDATE_DAILY_SPECIAL,
    PERMISSIONS.DELETE_DAILY_SPECIAL,
    PERMISSIONS.APPROVE_DAILY_SPECIAL,
    PERMISSIONS.VIEW_DAILY_SPECIALS,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.CREATE_ORDER,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.PROCESS_PAYMENT,
    PERMISSIONS.REFUND_ORDER,
    PERMISSIONS.MANAGE_TABLES,
    PERMISSIONS.UPDATE_TABLE_STATUS,
    PERMISSIONS.VIEW_FLOOR_PLAN,
    PERMISSIONS.EDIT_FLOOR_PLAN,
    PERMISSIONS.MANAGE_RESERVATIONS,
    PERMISSIONS.CREATE_RESERVATION,
    PERMISSIONS.UPDATE_RESERVATION,
    PERMISSIONS.DELETE_RESERVATION,
    PERMISSIONS.VIEW_RESERVATIONS,
    PERMISSIONS.ASSIGN_TABLE,
    PERMISSIONS.CONFIRM_RESERVATION,
    PERMISSIONS.CANCEL_RESERVATION,
    PERMISSIONS.SEND_NOTIFICATION,
    PERMISSIONS.VIEW_NOTIFICATION_HISTORY,
    PERMISSIONS.VIEW_ANALYTICS,
    PERMISSIONS.VIEW_REVENUE_REPORTS,
    PERMISSIONS.VIEW_STAFF_PERFORMANCE,
    PERMISSIONS.EXPORT_DATA,
    PERMISSIONS.CREATE_REPORTS
  ],
  
  // === PERSONNEL DE SALLE ===
  [USER_ROLES.STAFF_FLOOR]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.CREATE_ORDER,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.PROCESS_PAYMENT,
    PERMISSIONS.MANAGE_TABLES,
    PERMISSIONS.UPDATE_TABLE_STATUS,
    PERMISSIONS.VIEW_FLOOR_PLAN,
    PERMISSIONS.MANAGE_RESERVATIONS,
    PERMISSIONS.CREATE_RESERVATION,
    PERMISSIONS.UPDATE_RESERVATION,
    PERMISSIONS.VIEW_RESERVATIONS,
    PERMISSIONS.ASSIGN_TABLE,
    PERMISSIONS.CONFIRM_RESERVATION,
    PERMISSIONS.VIEW_DAILY_SPECIALS
  ],
  
  // === PERSONNEL DE BAR ===
  [USER_ROLES.STAFF_BAR]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.CREATE_ORDER,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.VIEW_FLOOR_PLAN,
    PERMISSIONS.VIEW_DAILY_SPECIALS
  ],
  
  // === PERSONNEL DE CUISINE ===
  [USER_ROLES.STAFF_KITCHEN]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.VIEW_DAILY_SPECIALS,
    PERMISSIONS.CREATE_DAILY_SPECIAL,
    PERMISSIONS.UPDATE_DAILY_SPECIAL
  ],
  
  // === PERSONNEL GÉNÉRIQUE ===
  [USER_ROLES.STAFF]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.MANAGE_ORDERS,
    PERMISSIONS.CREATE_ORDER,
    PERMISSIONS.UPDATE_ORDER,
    PERMISSIONS.VIEW_ORDERS,
    PERMISSIONS.MANAGE_TABLES,
    PERMISSIONS.UPDATE_TABLE_STATUS,
    PERMISSIONS.VIEW_FLOOR_PLAN,
    PERMISSIONS.VIEW_DAILY_SPECIALS
  ],
  
  // === PUBLIC - Accès limité ===
  [USER_ROLES.PUBLIC]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.CREATE_RESERVATION,
    PERMISSIONS.VIEW_DAILY_SPECIALS
  ],
  
  // === INVITÉ - Lecture seule ===
  [USER_ROLES.GUEST]: [
    PERMISSIONS.VIEW_MENU,
    PERMISSIONS.VIEW_DAILY_SPECIALS
  ]
};

// === FONCTIONS UTILITAIRES ===
export const getPermissionsForRole = (role) => {
  const permissions = ROLE_PERMISSIONS[role];
  if (!permissions) return [];
  
  // Si wildcard '*', retourner toutes les permissions
  if (permissions.includes('*')) {
    return Object.values(PERMISSIONS);
  }
  
  return permissions;
};

export const roleHasPermission = (role, permission) => {
  const rolePermissions = getPermissionsForRole(role);
  return rolePermissions.includes(permission);
};

export const hasPermission = (userRoles, permission) => {
  if (!Array.isArray(userRoles)) {
    userRoles = [userRoles];
  }
  
  return userRoles.some(role => roleHasPermission(role, permission));
};

export const getRolesWithPermission = (permission) => {
  return Object.keys(ROLE_PERMISSIONS).filter(role => 
    roleHasPermission(role, permission)
  );
};

export const canAccessResource = (userRole, requiredPermissions) => {
  if (!Array.isArray(requiredPermissions)) {
    requiredPermissions = [requiredPermissions];
  }
  
  return requiredPermissions.every(permission => 
    roleHasPermission(userRole, permission)
  );
};

export const getHighestRole = (roles) => {
  if (!Array.isArray(roles)) return roles;
  
  const roleHierarchy = [
    USER_ROLES.GUEST,
    USER_ROLES.PUBLIC,
    USER_ROLES.STAFF,
    USER_ROLES.STAFF_BAR,
    USER_ROLES.STAFF_KITCHEN,
    USER_ROLES.STAFF_FLOOR,
    USER_ROLES.MANAGER,
    USER_ROLES.OWNER,
    USER_ROLES.ADMIN
  ];
  
  let highestRole = USER_ROLES.GUEST;
  let highestIndex = -1;
  
  roles.forEach(role => {
    const index = roleHierarchy.indexOf(role);
    if (index > highestIndex) {
      highestIndex = index;
      highestRole = role;
    }
  });
  
  return highestRole;
};