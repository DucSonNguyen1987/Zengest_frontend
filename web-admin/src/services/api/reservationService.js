// ========================================
// üìÖ RESERVATION-SERVICE.JS - SERVICE API POUR LES R√âSERVATIONS
// ========================================
// Fichier: web-admin/src/services/api/reservationService.js
//
// Service API centralis√© pour toutes les op√©rations li√©es aux r√©servations
// avec gestion des erreurs et authentification.

import apiClient  from './client.js';

// ========================================
// üîß CONFIGURATION
// ========================================

const ENDPOINTS = {
  BASE: '/reservations',
  TODAY: '/reservations/today',
  UPCOMING: '/reservations/upcoming',
  AVAILABILITY: '/reservations/availability',
  ASSIGN_TABLE: (id) => `/reservations/${id}/assign-table`,
  STATUS: (id) => `/reservations/${id}/status`,
  SINGLE: (id) => `/reservations/${id}`
};

// ========================================
// üìÖ SERVICE PRINCIPAL
// ========================================

export const reservationService = {
  
  // ========================================
  // üìã R√âCUP√âRATION DES R√âSERVATIONS
  // ========================================
  
  /**
   * R√©cup√©rer toutes les r√©servations avec filtres et pagination
   */
  async getAllReservations(params = {}) {
    try {
      const defaultParams = {
        page: 1,
        limit: 20,
        sortBy: 'date',
        sortOrder: 'desc'
      };
      
      const queryParams = { ...defaultParams, ...params };
      
      const response = await apiClient.get(ENDPOINTS.BASE, { params: queryParams });
      
      console.log('‚úÖ R√©servations r√©cup√©r√©es:', response.data?.reservations?.length || 0);
      
      return {
        reservations: response.data.reservations || [],
        pagination: response.data.pagination || {},
        stats: response.data.stats || {}
      };
    } catch (error) {
      console.error('‚ùå Erreur getAllReservations:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des r√©servations');
    }
  },
  
  /**
   * R√©cup√©rer une r√©servation par ID
   */
  async getReservationById(id) {
    try {
      if (!id) {
        throw new Error('ID de r√©servation requis');
      }
      
      const response = await apiClient.get(ENDPOINTS.SINGLE(id));
      
      console.log('‚úÖ R√©servation r√©cup√©r√©e:', response.data.reservation._id);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur getReservationById:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration de la r√©servation');
    }
  },
  
  /**
   * R√©cup√©rer les r√©servations du jour
   */
  async getTodayReservations(date = null) {
    try {
      const targetDate = date || new Date().toISOString().split('T')[0];
      
      const response = await apiClient.get(ENDPOINTS.TODAY, { 
        params: { date: targetDate } 
      });
      
      console.log('‚úÖ R√©servations du jour r√©cup√©r√©es:', response.data?.reservations?.length || 0);
      
      return response.data.reservations || [];
    } catch (error) {
      console.error('‚ùå Erreur getTodayReservations:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des r√©servations du jour');
    }
  },
  
  /**
   * R√©cup√©rer les prochaines r√©servations
   */
  async getUpcomingReservations(limit = 10) {
    try {
      const response = await apiClient.get(ENDPOINTS.UPCOMING, { 
        params: { limit } 
      });
      
      console.log('‚úÖ Prochaines r√©servations r√©cup√©r√©es:', response.data?.reservations?.length || 0);
      
      return response.data.reservations || [];
    } catch (error) {
      console.error('‚ùå Erreur getUpcomingReservations:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des prochaines r√©servations');
    }
  },
  
  // ========================================
  // ‚ûï CR√âATION ET MISE √Ä JOUR
  // ========================================
  
  /**
   * Cr√©er une nouvelle r√©servation
   */
  async createReservation(reservationData) {
    try {
      // Validation des donn√©es requises
      const required = ['customer', 'date', 'time', 'guests'];
      const missing = required.filter(field => !reservationData[field]);
      
      if (missing.length > 0) {
        throw new Error(`Champs requis manquants: ${missing.join(', ')}`);
      }
      
      // Normaliser les donn√©es client
      if (reservationData.customer) {
        reservationData.customer = this.normalizeCustomerData(reservationData.customer);
      }
      
      const response = await apiClient.post(ENDPOINTS.BASE, reservationData);
      
      console.log('‚úÖ R√©servation cr√©√©e:', response.data.reservation._id);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur createReservation:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la cr√©ation de la r√©servation');
    }
  },
  
  /**
   * Mettre √† jour une r√©servation
   */
  async updateReservation(id, updateData) {
    try {
      if (!id) {
        throw new Error('ID de r√©servation requis');
      }
      
      // Normaliser les donn√©es client si pr√©sentes
      if (updateData.customer) {
        updateData.customer = this.normalizeCustomerData(updateData.customer);
      }
      
      const response = await apiClient.put(ENDPOINTS.SINGLE(id), updateData);
      
      console.log('‚úÖ R√©servation mise √† jour:', response.data.reservation._id);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur updateReservation:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise √† jour de la r√©servation');
    }
  },
  
  /**
   * Mettre √† jour le statut d'une r√©servation
   */
  async updateReservationStatus(id, status, notes = '') {
    try {
      if (!id || !status) {
        throw new Error('ID et statut requis');
      }
      
      const response = await apiClient.patch(ENDPOINTS.STATUS(id), { 
        status, 
        notes 
      });
      
      console.log('‚úÖ Statut r√©servation mis √† jour:', id, '‚Üí', status);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur updateReservationStatus:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise √† jour du statut');
    }
  },
  
  // ========================================
  // üóëÔ∏è SUPPRESSION
  // ========================================
  
  /**
   * Supprimer une r√©servation
   */
  async deleteReservation(id) {
    try {
      if (!id) {
        throw new Error('ID de r√©servation requis');
      }
      
      await apiClient.delete(ENDPOINTS.SINGLE(id));
      
      console.log('‚úÖ R√©servation supprim√©e:', id);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur deleteReservation:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression de la r√©servation');
    }
  },
  
  // ========================================
  // ü™ë GESTION DES TABLES
  // ========================================
  
  /**
   * Assigner une table √† une r√©servation
   */
  async assignTableToReservation(reservationId, tableData) {
    try {
      if (!reservationId) {
        throw new Error('ID de r√©servation requis');
      }
      
      const { tableId, floorPlanId, tableNumber } = tableData;
      
      if (!tableId && !tableNumber) {
        throw new Error('ID de table ou num√©ro de table requis');
      }
      
      const response = await apiClient.patch(ENDPOINTS.ASSIGN_TABLE(reservationId), {
        tableId,
        floorPlanId,
        tableNumber
      });
      
      console.log('‚úÖ Table assign√©e √† la r√©servation:', reservationId, '‚Üí', tableId || tableNumber);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur assignTableToReservation:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de l\'assignation de la table');
    }
  },
  
  /**
   * Retirer l'assignation de table
   */
  async unassignTableFromReservation(reservationId) {
    try {
      if (!reservationId) {
        throw new Error('ID de r√©servation requis');
      }
      
      const response = await apiClient.patch(ENDPOINTS.ASSIGN_TABLE(reservationId), {
        tableId: null,
        floorPlanId: null,
        tableNumber: null
      });
      
      console.log('‚úÖ Table d√©sassign√©e de la r√©servation:', reservationId);
      
      return response.data.reservation;
    } catch (error) {
      console.error('‚ùå Erreur unassignTableFromReservation:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la d√©sassignation de la table');
    }
  },
  
  // ========================================
  // üïê DISPONIBILIT√â
  // ========================================
  
  /**
   * Rechercher des cr√©neaux disponibles
   */
  async searchAvailableSlots(searchParams) {
    try {
      const { date, guests, duration = 120, preferredTime } = searchParams;
      
      if (!date || !guests) {
        throw new Error('Date et nombre de convives requis');
      }
      
      const params = {
        date,
        guests: guests.toString(),
        duration: duration.toString()
      };
      
      if (preferredTime) {
        params.preferredTime = preferredTime;
      }
      
      const response = await apiClient.get(ENDPOINTS.AVAILABILITY, { params });
      
      console.log('‚úÖ Cr√©neaux disponibles trouv√©s:', response.data?.slots?.length || 0);
      
      return response.data.slots || [];
    } catch (error) {
      console.error('‚ùå Erreur searchAvailableSlots:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la recherche de cr√©neaux');
    }
  },
  
  /**
   * V√©rifier la disponibilit√© pour une date/heure pr√©cise
   */
  async checkAvailability(date, time, guests, duration = 120) {
    try {
      const response = await apiClient.get(`${ENDPOINTS.AVAILABILITY}/check`, {
        params: { date, time, guests, duration }
      });
      
      console.log('‚úÖ Disponibilit√© v√©rifi√©e:', response.data.available ? 'Disponible' : 'Non disponible');
      
      return {
        available: response.data.available,
        reason: response.data.reason || null,
        alternatives: response.data.alternatives || []
      };
    } catch (error) {
      console.error('‚ùå Erreur checkAvailability:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la v√©rification de disponibilit√©');
    }
  },
  
  // ========================================
  // üìä STATISTIQUES ET RAPPORTS
  // ========================================
  
  /**
   * R√©cup√©rer les statistiques des r√©servations
   */
  async getReservationStats(period = 'month') {
    try {
      const response = await apiClient.get(`${ENDPOINTS.BASE}/stats`, {
        params: { period }
      });
      
      console.log('‚úÖ Statistiques r√©servations r√©cup√©r√©es');
      
      return response.data.stats;
    } catch (error) {
      console.error('‚ùå Erreur getReservationStats:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  },
  
  /**
   * Exporter les r√©servations
   */
  async exportReservations(format = 'csv', filters = {}) {
    try {
      const response = await apiClient.get(`${ENDPOINTS.BASE}/export`, {
        params: { format, ...filters },
        responseType: 'blob'
      });
      
      // Cr√©er un lien de t√©l√©chargement
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `reservations_${new Date().toISOString().split('T')[0]}.${format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      console.log('‚úÖ Export r√©servations r√©ussi');
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur exportReservations:', error.message);
      throw new Error(error.response?.data?.message || 'Erreur lors de l\'export des r√©servations');
    }
  },
  
  // ========================================
  // üîß UTILITAIRES
  // ========================================
  
  /**
   * Normaliser les donn√©es client
   */
  normalizeCustomerData(customer) {
    if (!customer) return null;
    
    // Si on a firstName et lastName, les conserver
    if (customer.firstName && customer.lastName) {
      return {
        firstName: customer.firstName.trim(),
        lastName: customer.lastName.trim(),
        name: `${customer.firstName.trim()} ${customer.lastName.trim()}`,
        email: customer.email?.trim().toLowerCase(),
        phone: customer.phone?.trim(),
        ...customer
      };
    }
    
    // Si on a seulement name, le s√©parer
    if (customer.name) {
      const nameParts = customer.name.trim().split(' ');
      return {
        firstName: nameParts[0] || '',
        lastName: nameParts.slice(1).join(' ') || '',
        name: customer.name.trim(),
        email: customer.email?.trim().toLowerCase(),
        phone: customer.phone?.trim(),
        ...customer
      };
    }
    
    throw new Error('Nom du client requis (name ou firstName/lastName)');
  },
  
  /**
   * Valider les donn√©es de r√©servation
   */
  validateReservationData(data) {
    const errors = [];
    
    // Validation des champs requis
    if (!data.customer) errors.push('Informations client requises');
    if (!data.date) errors.push('Date requise');
    if (!data.time) errors.push('Heure requise');
    if (!data.guests || data.guests < 1) errors.push('Nombre de convives invalide');
    
    // Validation du format de date
    if (data.date && !data.date.match(/^\d{4}-\d{2}-\d{2}$/)) {
      errors.push('Format de date invalide (YYYY-MM-DD attendu)');
    }
    
    // Validation du format d'heure
    if (data.time && !data.time.match(/^\d{2}:\d{2}$/)) {
      errors.push('Format d\'heure invalide (HH:MM attendu)');
    }
    
    // Validation des donn√©es client
    if (data.customer) {
      if (!data.customer.name && (!data.customer.firstName || !data.customer.lastName)) {
        errors.push('Nom du client requis');
      }
      
      if (data.customer.email && !data.customer.email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
        errors.push('Format d\'email invalide');
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  },
  
  /**
   * Formater une r√©servation pour l'affichage
   */
  formatReservationForDisplay(reservation) {
    if (!reservation) return null;
    
    return {
      ...reservation,
      displayName: reservation.customer?.name || 
        `${reservation.customer?.firstName || ''} ${reservation.customer?.lastName || ''}`.trim(),
      displayDate: new Date(reservation.date).toLocaleDateString('fr-FR'),
      displayTime: reservation.time,
      displayGuests: `${reservation.guests} personne${reservation.guests > 1 ? 's' : ''}`,
      displayStatus: this.getStatusLabel(reservation.status)
    };
  },
  
  /**
   * Obtenir le label d'un statut
   */
  getStatusLabel(status) {
    const labels = {
      'pending': 'En attente',
      'confirmed': 'Confirm√©e',
      'seated': 'Install√©e',
      'completed': 'Termin√©e',
      'cancelled': 'Annul√©e',
      'no_show': 'Absence'
    };
    
    return labels[status] || status;
  },
  
  /**
   * Obtenir la couleur d'un statut
   */
  getStatusColor(status) {
    const colors = {
      'pending': 'warning',
      'confirmed': 'info',
      'seated': 'primary',
      'completed': 'success',
      'cancelled': 'danger',
      'no_show': 'dark'
    };
    
    return colors[status] || 'secondary';
  }
};

export default reservationService;